// Code generated by hertz generator.

package navigationapi

import (
	"context"
	"log"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	etcd "github.com/kitex-contrib/registry-etcd"
	navigationapi "github.com/quarkcms/quark-micro/cmd/navigation/api/biz/model/navigationapi"
	"github.com/quarkcms/quark-micro/cmd/navigation/api/config"
	"github.com/quarkcms/quark-micro/cmd/navigation/rpc/kitex_gen/navigation"
	"github.com/quarkcms/quark-micro/cmd/navigation/rpc/kitex_gen/navigation/navigationservice"
	"github.com/quarkcms/quark-micro/pkg/msg"
)

// 获取请求客户端
func newClient() navigationservice.Client {
	r, err := etcd.NewEtcdResolver([]string{config.Registry.Host})
	if err != nil {
		log.Fatal(err)
	}

	getClient, err := navigationservice.NewClient(config.Registry.Endpoint.ServiceName, client.WithResolver(r))
	if err != nil {
		log.Fatal(err)
	}

	return getClient
}

// GetNavigationList .
// @router /api/v1/navigation/list [GET]
func GetNavigationList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req navigationapi.GetNavigationListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := newClient().GetNavigationList(context.Background(),
		&navigation.NavigationListRequest{
			Limit: req.Limit,
			Pid:   req.Pid,
			Order: "sort asc",
		},
		callopt.WithRPCTimeout(3*time.Second),
	)
	if err != nil {
		c.JSON(200, msg.Error(msg.InternalServerError))
		return
	}

	c.JSON(consts.StatusOK, msg.Success(resp))
}
