// Code generated by hertz generator.

package handler

import (
	"context"
	"encoding/json"
	"log"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/quarkcms/quark-hertz/cmd/admin/rpc/kitex_gen/admin"
	"github.com/quarkcms/quark-hertz/cmd/admin/rpc/kitex_gen/admin/resource"
	"github.com/quarkcms/quark-hertz/pkg/msg"
)

// 资源列表
func ResourceIndex(ctx context.Context, c *app.RequestContext) {
	resourceName := c.Param("resource")
	if resourceName == "" {
		c.JSON(200, msg.Error("参数错误", ""))
		return
	}

	requestClient, err := resource.NewClient("resource", client.WithHostPorts("0.0.0.0:8888"))
	if err != nil {
		log.Fatal(err)
	}

	body, err := c.Body()
	if err != nil {
		log.Fatal(err)
	}

	req := &admin.ResourceRequest{
		Request: &admin.Request{
			MethodString:   string(c.Method()),
			HostString:     string(c.Host()),
			FullPathString: string(c.FullPath()),
			PathString:     string(c.Path()),
			QueryString:    string(c.Request.QueryString()),
			BodyBuffer:     body,
		},
	}
	resp, err := requestClient.ResourceHandle(context.Background(), req, callopt.WithRPCTimeout(3*time.Second))
	if err != nil {
		c.JSON(200, msg.Error("操作失败", err.Error()))
		return
	}

	data := map[string]interface{}{}
	err = json.Unmarshal(resp.RespBody, &data)
	if err != nil {
		c.JSON(200, msg.Error("操作失败", err.Error()))
		return
	}

	c.JSON(200, msg.Success("操作成功", "", data))
}
