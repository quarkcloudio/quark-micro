// Code generated by Kitex v0.4.4. DO NOT EDIT.

package combineservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	admin "github.com/quarkcms/quark-hertz/cmd/admin/rpc/kitex_gen/admin"
)

type CombineService interface {
	admin.Resource
}

func serviceInfo() *kitex.ServiceInfo {
	return combineServiceServiceInfo
}

var combineServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CombineService"
	handlerType := (*CombineService)(nil)
	methods := map[string]kitex.MethodInfo{
		"resourceHandle": kitex.NewMethodInfo(resourceHandleHandler, newResourceResourceHandleArgs, newResourceResourceHandleResult, false),
		"captchaHandle":  kitex.NewMethodInfo(captchaHandleHandler, newResourceCaptchaHandleArgs, newResourceCaptchaHandleResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "admin",
	}
	extra["combine_service"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func resourceHandleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*admin.ResourceResourceHandleArgs)
	realResult := result.(*admin.ResourceResourceHandleResult)
	success, err := handler.(admin.Resource).ResourceHandle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newResourceResourceHandleArgs() interface{} {
	return admin.NewResourceResourceHandleArgs()
}

func newResourceResourceHandleResult() interface{} {
	return admin.NewResourceResourceHandleResult()
}

func captchaHandleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*admin.ResourceCaptchaHandleArgs)
	realResult := result.(*admin.ResourceCaptchaHandleResult)
	success, err := handler.(admin.Resource).CaptchaHandle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newResourceCaptchaHandleArgs() interface{} {
	return admin.NewResourceCaptchaHandleArgs()
}

func newResourceCaptchaHandleResult() interface{} {
	return admin.NewResourceCaptchaHandleResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ResourceHandle(ctx context.Context, req *admin.ResourceRequest) (r *admin.ResourceResponse, err error) {
	var _args admin.ResourceResourceHandleArgs
	_args.Req = req
	var _result admin.ResourceResourceHandleResult
	if err = p.c.Call(ctx, "resourceHandle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CaptchaHandle(ctx context.Context, req *admin.ResourceRequest) (r *admin.ResourceResponse, err error) {
	var _args admin.ResourceCaptchaHandleArgs
	_args.Req = req
	var _result admin.ResourceCaptchaHandleResult
	if err = p.c.Call(ctx, "captchaHandle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
