// Code generated by hertz generator.

package main

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	handler "github.com/quarkcms/quark-hertz/cmd/admin/biz/handler"
	"github.com/quarkcms/quark-hertz/pkg/resource"
	"github.com/quarkcms/quark-hertz/pkg/resource/adapter/hertzadapter"
	"github.com/quarkcms/quark-hertz/pkg/resource/dal/db"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// 定义全局资源变量
var config *resource.Config

// 初始化
func init() {

	// 数据库配置信息
	dsn := "root:Bc5HQFJc4bLjZCcC@tcp(127.0.0.1:3306)/quarkgo?charset=utf8&parseTime=True&loc=Local"

	// 初始化数据库连接
	db.Init(mysql.Open(dsn), &gorm.Config{})

	// 配置资源
	config = &resource.Config{
		Providers: handler.Providers,
	}

	config.DBConn()
}

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {

	// 后台路由组
	rg := r.Group("/api/admin")

	// 登录
	rg.GET("/login/:resource/index", func(c context.Context, ctx *app.RequestContext) {
		hertzadapter.ResponseAdapter(resource.New(config), hertzadapter.COMPONENT_RESPONSE, ctx)
	})
	rg.POST("/login/:resource/handle", func(c context.Context, ctx *app.RequestContext) {
		hertzadapter.ResponseAdapter(resource.New(config), hertzadapter.ACTION_RESPONSE, ctx)
	})
	rg.GET("/login/:resource/captchaId", func(c context.Context, ctx *app.RequestContext) {
		hertzadapter.ResponseAdapter(resource.New(config), hertzadapter.ACTION_RESPONSE, ctx)
	})
	rg.GET("/login/:resource/captcha/:id", func(c context.Context, ctx *app.RequestContext) {
		hertzadapter.ResponseAdapter(resource.New(config), hertzadapter.FILE_RESPONSE, ctx)
	})

	// 资源
	rg.GET("/:resource/index", func(c context.Context, ctx *app.RequestContext) {
		hertzadapter.ResponseAdapter(resource.New(config), hertzadapter.COMPONENT_RESPONSE, ctx)
	})
}
