// Code generated by hertz generator.

package handler

import (
	"context"
	"log"
	"time"

	"github.com/quarkcms/quark-micro/pkg/msg"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	etcd "github.com/kitex-contrib/registry-etcd"
	"github.com/quarkcms/quark-micro/cmd/post/api/config"
	"github.com/quarkcms/quark-micro/cmd/post/rpc/kitex_gen/post"
	"github.com/quarkcms/quark-micro/cmd/post/rpc/kitex_gen/post/postservice"
)

// 获取请求客户端
func newClient() postservice.Client {
	r, err := etcd.NewEtcdResolver([]string{config.Registry.Host})
	if err != nil {
		log.Fatal(err)
	}

	getClient, err := postservice.NewClient(config.Registry.Endpoint.ServiceName, client.WithResolver(r))
	if err != nil {
		log.Fatal(err)
	}

	return getClient
}

// 获取文章列表
func List(ctx context.Context, c *app.RequestContext) {

	// 请求结构体
	type Request struct {
		Search   *string `query:"search" vd:"len($) >= 0"`
		Page     int64   `query:"page" vd:"len($) >= 0"`
		PageSize int64   `query:"page_size" vd:"len($) >= 0"`
	}

	// 定义变量
	var req Request

	// 验证并绑定值
	err := c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, msg.Error(msg.ParameterError))
		return
	}

	resp, err := newClient().GetArticleList(context.Background(),
		&post.ArticleListRequest{
			Search:   req.Search,
			Page:     req.Page,
			PageSize: req.PageSize,
		},
		callopt.WithRPCTimeout(3*time.Second),
	)
	if err != nil {
		c.JSON(200, msg.Error(msg.InternalServerError))
		return
	}

	c.JSON(200, msg.Success(resp))
}
