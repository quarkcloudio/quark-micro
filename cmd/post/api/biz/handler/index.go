// Code generated by hertz generator.

package handler

import (
	"context"
	"log"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	etcd "github.com/kitex-contrib/registry-etcd"
	"github.com/quarkcms/quark-micro/cmd/post/api/config"
	"github.com/quarkcms/quark-micro/cmd/post/rpc/kitex_gen/post"
	"github.com/quarkcms/quark-micro/cmd/post/rpc/kitex_gen/post/postservice"
)

// 获取请求客户端
func newClient() postservice.Client {
	r, err := etcd.NewEtcdResolver([]string{config.Registry.Host})
	if err != nil {
		log.Fatal(err)
	}

	getClient, err := postservice.NewClient(config.Registry.Endpoint.ServiceName, client.WithResolver(r))
	if err != nil {
		log.Fatal(err)
	}

	return getClient
}

// 首页
func Index(ctx context.Context, c *app.RequestContext) {
	c.JSON(200, utils.H{
		"message": "Hello World!",
	})
}

// 获取文章列表
func List(ctx context.Context, c *app.RequestContext) {
	req := &post.ArticleListReq{}
	resp, err := newClient().GetArticleList(context.Background(), req, callopt.WithRPCTimeout(3*time.Second))
	if err != nil {
		log.Fatal(err)
	}

	if resp == nil {
		c.JSON(200, utils.H{
			"message": "数据不存在！",
		})
		return
	}

	c.JSON(200, utils.H{
		"message": "获取成功！",
		"data":    resp,
	})
}
