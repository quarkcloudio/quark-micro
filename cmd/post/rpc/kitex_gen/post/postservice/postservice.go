// Code generated by Kitex v0.4.4. DO NOT EDIT.

package postservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	post "github.com/quarkcms/quark-micro/cmd/post/rpc/kitex_gen/post"
)

func serviceInfo() *kitex.ServiceInfo {
	return postServiceServiceInfo
}

var postServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PostService"
	handlerType := (*post.PostService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetPage":          kitex.NewMethodInfo(getPageHandler, newPostServiceGetPageArgs, newPostServiceGetPageResult, false),
		"GetArticleDetail": kitex.NewMethodInfo(getArticleDetailHandler, newPostServiceGetArticleDetailArgs, newPostServiceGetArticleDetailResult, false),
		"GetArticleList":   kitex.NewMethodInfo(getArticleListHandler, newPostServiceGetArticleListArgs, newPostServiceGetArticleListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "post",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getPageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetPageArgs)
	realResult := result.(*post.PostServiceGetPageResult)
	success, err := handler.(post.PostService).GetPage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetPageArgs() interface{} {
	return post.NewPostServiceGetPageArgs()
}

func newPostServiceGetPageResult() interface{} {
	return post.NewPostServiceGetPageResult()
}

func getArticleDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetArticleDetailArgs)
	realResult := result.(*post.PostServiceGetArticleDetailResult)
	success, err := handler.(post.PostService).GetArticleDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetArticleDetailArgs() interface{} {
	return post.NewPostServiceGetArticleDetailArgs()
}

func newPostServiceGetArticleDetailResult() interface{} {
	return post.NewPostServiceGetArticleDetailResult()
}

func getArticleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostServiceGetArticleListArgs)
	realResult := result.(*post.PostServiceGetArticleListResult)
	success, err := handler.(post.PostService).GetArticleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostServiceGetArticleListArgs() interface{} {
	return post.NewPostServiceGetArticleListArgs()
}

func newPostServiceGetArticleListResult() interface{} {
	return post.NewPostServiceGetArticleListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetPage(ctx context.Context, req *post.PageReq) (r *post.PageResp, err error) {
	var _args post.PostServiceGetPageArgs
	_args.Req = req
	var _result post.PostServiceGetPageResult
	if err = p.c.Call(ctx, "GetPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticleDetail(ctx context.Context, req *post.ArticleDetailReq) (r *post.ArticleDetailResp, err error) {
	var _args post.PostServiceGetArticleDetailArgs
	_args.Req = req
	var _result post.PostServiceGetArticleDetailResult
	if err = p.c.Call(ctx, "GetArticleDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticleList(ctx context.Context, req *post.ArticleListReq) (r *post.ArticleListResp, err error) {
	var _args post.PostServiceGetArticleListArgs
	_args.Req = req
	var _result post.PostServiceGetArticleListResult
	if err = p.c.Call(ctx, "GetArticleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
