// Code generated by Kitex v0.4.4. DO NOT EDIT.

package categoryservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	category "github.com/quarkcloudio/quark-micro/cmd/category/rpc/kitex_gen/category"
)

func serviceInfo() *kitex.ServiceInfo {
	return categoryServiceServiceInfo
}

var categoryServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CategoryService"
	handlerType := (*category.CategoryService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetCategoryDetail": kitex.NewMethodInfo(getCategoryDetailHandler, newCategoryServiceGetCategoryDetailArgs, newCategoryServiceGetCategoryDetailResult, false),
		"GetCategoryList":   kitex.NewMethodInfo(getCategoryListHandler, newCategoryServiceGetCategoryListArgs, newCategoryServiceGetCategoryListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "category",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getCategoryDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryServiceGetCategoryDetailArgs)
	realResult := result.(*category.CategoryServiceGetCategoryDetailResult)
	success, err := handler.(category.CategoryService).GetCategoryDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceGetCategoryDetailArgs() interface{} {
	return category.NewCategoryServiceGetCategoryDetailArgs()
}

func newCategoryServiceGetCategoryDetailResult() interface{} {
	return category.NewCategoryServiceGetCategoryDetailResult()
}

func getCategoryListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*category.CategoryServiceGetCategoryListArgs)
	realResult := result.(*category.CategoryServiceGetCategoryListResult)
	success, err := handler.(category.CategoryService).GetCategoryList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCategoryServiceGetCategoryListArgs() interface{} {
	return category.NewCategoryServiceGetCategoryListArgs()
}

func newCategoryServiceGetCategoryListResult() interface{} {
	return category.NewCategoryServiceGetCategoryListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetCategoryDetail(ctx context.Context, req *category.CategoryDetailRequest) (r *category.CategoryDetailResponse, err error) {
	var _args category.CategoryServiceGetCategoryDetailArgs
	_args.Req = req
	var _result category.CategoryServiceGetCategoryDetailResult
	if err = p.c.Call(ctx, "GetCategoryDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryList(ctx context.Context, req *category.CategoryListRequest) (r *category.CategoryListResponse, err error) {
	var _args category.CategoryServiceGetCategoryListArgs
	_args.Req = req
	var _result category.CategoryServiceGetCategoryListResult
	if err = p.c.Call(ctx, "GetCategoryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
