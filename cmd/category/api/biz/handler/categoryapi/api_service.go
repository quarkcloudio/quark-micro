// Code generated by hertz generator.

package categoryapi

import (
	"context"
	"log"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	etcd "github.com/kitex-contrib/registry-etcd"
	categoryapi "github.com/quarkcloudio/quark-micro/cmd/category/api/biz/model/categoryapi"
	"github.com/quarkcloudio/quark-micro/cmd/category/api/config"
	"github.com/quarkcloudio/quark-micro/cmd/category/rpc/kitex_gen/category"
	"github.com/quarkcloudio/quark-micro/cmd/category/rpc/kitex_gen/category/categoryservice"
	"github.com/quarkcloudio/quark-micro/pkg/msg"
)

// 获取请求客户端
func newClient() categoryservice.Client {
	r, err := etcd.NewEtcdResolver([]string{config.Registry.Host})
	if err != nil {
		log.Fatal(err)
	}

	getClient, err := categoryservice.NewClient(config.Registry.Endpoint.ServiceName, client.WithResolver(r))
	if err != nil {
		log.Fatal(err)
	}

	return getClient
}

// GetCategoryList .
// @router /api/v1/category/list [GET]
func GetCategoryList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req categoryapi.GetCategoryListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := newClient().GetCategoryList(context.Background(),
		&category.CategoryListRequest{
			Search:   req.Search,
			Page:     req.Page,
			PageSize: req.PageSize,
			Order:    "sort asc",
			Pid:      req.Pid,
			Type:     req.Type,
		},
		callopt.WithRPCTimeout(3*time.Second),
	)
	if err != nil {
		c.JSON(200, msg.Error(msg.InternalServerError))
		return
	}

	c.JSON(consts.StatusOK, msg.Success(resp))
}

// GetCategoryDetail .
// @router /api/v1/category/detail [GET]
func GetCategoryDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req categoryapi.GetCategoryDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := newClient().GetCategoryDetail(context.Background(),
		&category.CategoryDetailRequest{
			Id:   req.ID,
			Name: &req.Name,
		},
		callopt.WithRPCTimeout(3*time.Second),
	)
	if err != nil {
		c.JSON(200, msg.Error(msg.InternalServerError))
		return
	}

	c.JSON(consts.StatusOK, resp)
}
